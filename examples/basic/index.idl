[meta
  title:"idyll-loader-component"
  description:"A loader for idyll so your scripts don't block" /]

[Header
  title:"idyll-loader-component"
  author:"Ricky Reusser"
  authorLink:"https://twitter.com/rickyreusser" /]

This document uses [Link href:"https://github.com/idyll-lang/idyll-loader-component" text:"idyll-loader-component"/] display content that, for one reason or another, doesn't get displayed on initial page load. It's a contrived example, but the blockquote below uses the `Loader` component.

[Loader scrollwatch:`true` scrollrange:0]
[Quote]This blockquote is wrapped in `Loader` so that it shows up only on scroll (which is probably right away if you're at the top of the page when loading).[/Quote]
[/Loader]

[Loader error:"This is a component with an externally supplied error message. The main reason to do this would be if you were using the Loader component programatically to manage loading external resources yourself."]
This text is never displayed
[/Loader]

[Aside]
  [Fig number:1]
    [Lineplot style:`{height: '250px'}`/]
    [Caption]Just a plot of [Equation]y = x + 1[/Equation][/Caption]
  [/Fig]
[/Aside]

This could easily be used to lazy-load images. The more interesting case though is using `Loader` to add content that pulls in sorta expensive external scripts without blocking page load. In particular, by specifying a script source, you can either load an external script on page loads or once the first component that needs it loads. Since it manages load events, you don't need to worry about ensuring the library is loaded before you use it. [Figref number:1/] shows a plot of [Equation]y = x + 1[/Equation]. It's accomplished by creating [link href:"https://github.com/rreusser/idyll-loader-component/blob/master/examples/basic/components/lineplot.js" text:"a custom component"/] with the following code:

```
class Lineplot extends PlotlyComponent {
  plot (gd) {
    Plotly.plot(gd, {
      data: [{
        y: [1, 2, 3]
      }], layout: {
        margin: {t: 40, r: 30, b: 30, l: 30}
      }
    });
  }
}
```

The [Link href:"https://github.com/plotly/plotly.js" text:"plotly.js"/] component just uses the loader, which is also very simple to use:

```
render () {
  return <Loader src="..." onLoad={this.onLoad}>
    I'm content added after the script loads!
  </Loader>
}
```

You can find the source [Link href:"https://github.com/idyll-lang/idyll-loader-component/blob/master/examples/basic/components/plotly.js#L107-L117" text:"here"/]. It's quite a bit more complicated than it needs to be because CORS didn't work out for the external resources I was trying to load. Using the loader was simple though.

[Aside]
  [Fig number:2]
    [Lineplot style:`{height: '250px'}`/]
    [Caption]Second figure, same as the first. Except this one has a long caption that wraps nicely onto the next line because I mean captions trivial and all, but it actually takes like twenty minutes to sit down and sort out the block/inline CSS centering stuff, plus including an equation wraps the whole thing in a `p` tag so that it's actually really really nice if it all Just Worksâ„¢.[/Caption]
  [/Fig]
[/Aside]

And for some reason [Figref number:2/] shows the same plot again, but hey at least it only loads the plotly cdn script once and the end-user doesn't have to worry about including the script at all. Hooray! ðŸ˜¸

And of course it wouldn't be complete without good old json loading. In this case I downloaded the data from [Link href:"plot.ly/~rreusser/99.json" text:"plot.ly/~rreusser/99.json"/] and dropped it in my `data/` folder.

[Fig number:3]
  [Plotly src:"data/99.json" style:`{height:'500px'}`/]
  [Caption]Visitors to Joshua Tree National Park from 1979 through the present. A new brochure in 2014, possibly? Source: [Link href:"https://irma.nps.gov/Stats/" text:"NPS Stats (https://irma.nps.gov/Stats/)" /][/Caption]
[/Fig]
